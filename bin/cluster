#!/usr/bin/env php
<?php

use Amp\ByteStream;
use Amp\Cluster\Watcher;
use Amp\File;
use Amp\Log\ConsoleFormatter;
use Amp\Log\StreamHandler;
use Amp\Loop;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\HandlerInterface;
use Monolog\Logger;
use Psr\Log\LogLevel;
use function Amp\Cluster\countCpuCores;

// some command line SAPIs (e.g. phpdbg) don't have that function
if (\function_exists("cli_set_process_title")) {
    @\cli_set_process_title("amp-cluster");
}

$help = <<<EOT
            __           __
      _____/ /_  _______/ /____  _____
     / ___/ / / / / ___/ __/ _ \/ ___/
    / /__/ / /_/ (__  ) /_/  __/ /
    \___/_/\__,_/____/\__/\___/_/

    -s, --script      Defines the script to run (required)
    -h, --help        Display the help screen
    -l, --log         Set the minimum log output level (default: info)
    -w, --workers     Manually specify worker count (default: CPU core count)
    --                Marker to separate cluster and worker arguments

    Example Usage:
    cluster --help
    cluster -s /path/to/script.php -w 4
    cluster -s /another/script/path.php -l warning
    cluster -s server.php -- --port 8080


EOT;

\error_reporting(E_ALL);

(function () {
    $paths = [
        \dirname(__DIR__, 3) . "/autoload.php",
        \dirname(__DIR__) . "/vendor/autoload.php",
    ];

    foreach ($paths as $path) {
        if (\file_exists($path)) {
            $autoloadPath = $path;
            break;
        }
    }

    if (!isset($autoloadPath)) {
        \fwrite(STDERR, "Could not locate autoload.php");
        exit(1);
    }

    require $autoloadPath;
})();

$args = [
    "help" => [
        "prefix" => "h",
        "longPrefix" => "help",
        "description" => "Display the help screen",
        "noValue" => true,
    ],
    "log" => [
        "prefix" => "l",
        "longPrefix" => "log",
        "description" => "Set the minimum log output level",
        "defaultValue" => LogLevel::INFO,
    ],
    "file" => [
        "prefix" => "f",
        "longPrefix" => "file",
        "description" => "Log file path. Log messages are written to STDOUT if not specified.",
    ],
    "workers" => [
        "prefix" => "w",
        "longPrefix" => "workers",
        "description" => "Manually specify worker count",
        "castTo" => "int",
    ],
    "script" => [
        "prefix" => "s",
        "longPrefix" => "script",
        "description" => "Defines the script to run",
    ],
];

$flags = [];

foreach ($args as $arg) {
    if (isset($arg['prefix'])) {
        $flags['-' . $arg['prefix']] = $arg['noValue'] ?? false;
    }

    if (isset($arg['longPrefix'])) {
        $flags['--' . $arg['longPrefix']] = $arg['noValue'] ?? false;
    }
}

$arguments = new League\CLImate\Argument\Manager;
$arguments->add($args);

Loop::run(function () use ($argc, $argv, $flags, $arguments, $help) {
    try {
        $workerArguments = [];

        for ($i = 1; $i < $argc; $i++) {
            if ($argv[$i] === '--') {
                $workerArguments = \array_slice($argv, $i + 1);
                $argv = \array_slice($argv, 0, $i);
                break;
            }

            if (!isset($flags[$argv[$i]])) {
                throw new Exception("Unknown command line option: {$argv[$i]}");
            }

            if (!$flags[$argv[$i]]) {
                $i++;
            }
        }

        $arguments->parse($argv);

        if ($arguments->defined("help")) {
            echo $help;
            exit(0);
        }

        if (!$arguments->defined("script")) {
            throw new Exception("Script path argument is required (-s or --script)");
        }
    } catch (Exception $e) {
        echo "Invalid arguments: " . $e->getMessage() . PHP_EOL . PHP_EOL;
        echo $help;
        exit(1);
    }

    if ($arguments->defined("log")) {
        $level = $arguments->get("log");
    } else {
        $level = LogLevel::INFO;
    }

    if ($arguments->defined("file")) {
        $logHandler = new StreamHandler(yield File\open($arguments->get("file"), "a"), $level);
        $formatter = new LineFormatter;
    } else {
        $logHandler = new StreamHandler(ByteStream\getStdout(), $level);
        $formatter = new ConsoleFormatter;
    }

    $formatter->allowInlineLineBreaks(true);
    $logHandler->setFormatter($formatter);

    $logger = new Logger("cluster");
    $logger->pushHandler($logHandler);

    if ($arguments->defined("workers")) {
        $workers = $arguments->get("workers");
    } else {
        $workers = countCpuCores();
    }

    $script = $arguments->get("script");

    if (!\is_file($script)) {
        echo "Error: Could not find script at path " . $script . PHP_EOL . PHP_EOL;
        exit(1);
    }

    $logger->info("Starting cluster with " . $workers . " workers");

    \array_unshift($workerArguments, $arguments->get("script"));
    $watcher = new Watcher($workerArguments, $logger);
    $watcher->onMessage(HandlerInterface::class, function ($record) use ($logHandler) {
        $logHandler->handle($record);
    });

    try {
        $signalHandler = function ($watcherId, $signalNumber, $signal) use ($watcher, $logger) {
            Loop::cancel($watcherId);

            $logger->info('Stopping cluster due to received signal: ' . $signal);
            $watcher->stop();
        };

        Loop::unreference(Loop::onSignal(\defined('SIGINT') ? \SIGINT : 2, $signalHandler, 'SIGINT'));
        Loop::unreference(Loop::onSignal(\defined('SIGTERM') ? \SIGTERM : 15, $signalHandler, 'SIGTERM'));
    } catch (Loop\UnsupportedFeatureException $e) {
        // ignore if extensions are missing or OS is Windows
    }

    yield $watcher->run($workers);
});
